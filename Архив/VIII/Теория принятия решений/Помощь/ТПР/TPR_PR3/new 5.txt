double MJD = 3432.1;
double T = (MJD - 2400000.5)/36525;
Vec3D m_R(4,3,5);
cout << " (x,y,z) = " << fixed << setprecision(8) << setw(12) << m_R << endl;
cout << "ecliptical coordinates" << endl;
Vec3D m_R1 = Equ2EclMatrix(T) * m_R; // Ecliptic;
cout << " (x,y,z) = " << fixed << setprecision(8) << setw(12) << m_R1 << endl;
cout << " o ' \" o ' \"" << endl;
cout << " L = " << setprecision(2) << setw(12) << Angle(Deg*m_R1[phi],DMMSSs);
cout << " B = " << setprecision(1) << showpos << setw(11) << Angle(Deg*m_R1[theta],DMMSSs) << noshowpos;
cout << " R = " << setprecision(8) << setw(12) << m_R1[r] << endl;
cout << endl << endl;
cout << "equatorial coordinates" << endl;
Vec3D m_R2 = Ecl2EquMatrix(T) * m_R; // Equator;
cout << " (x,y,z) = " << fixed << setprecision(8) << setw(12) << m_R2 << endl;
cout << " h m s o ' \"" << endl;
cout << " RA = " << setprecision(2) << setw(11) << Angle(Deg*m_R2[phi]/15.0,DMMSSs);
cout << " Dec = " << setprecision(1) << showpos << setw(11) << Angle(Deg*m_R2[theta],DMMSSs) << noshowpos;
cout << " R = " << setprecision(8) << setw(12) << m_R2[r] << endl;
cout << endl << endl;
