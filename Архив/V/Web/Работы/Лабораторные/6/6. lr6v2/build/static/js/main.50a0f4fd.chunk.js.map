{"version":3,"sources":["App.js","components/login.js","components/admin.js","components/user.js","serviceWorker.js","index.js"],"names":["socket","Login","className","onSubmit","this","props","login","id","message","name","React","Component","Admin","onClick","start_torgs","br","brokers","i","length","broker","push","money","table","j","stocks","price","ontorg_stocks","ontorg_price","key","get_brokers","pr","User","sell","event","console","log","state","index","count","username","buy","in_torg","get_index","setState","Number","target","value","get_count","get_info","get_torgs","onChange","start_money","st","App","start_exchange","preventDefault","elements","io","on","emit","data","uname","persons","get_content","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.50a0f4fd.chunk.js","sourcesContent":["import React from 'react';\nimport Login from \"./components/login\";\nimport Admin from \"./components/admin\"\nimport User from \"./components/user\"\nimport * as io from 'socket.io-client'\nimport './App.css';\n\nlet socket;\n\nclass App extends React.Component{\n  state = {\n    username: 'Nobody',\n    stocks: null,\n    brokers: null,\n    start_exchange: false,\n    message: ''\n  };\n\n  login = (event) => {\n    event.preventDefault();\n    let name = event.target.elements.name.value;\n    console.log(name);\n\n    socket = io('http://localhost:8080');\n    socket.on('connect',function(){\n      socket.emit('login', {name:name});\n    });\n\n    socket.on('welcome', (data) => {\n      this.setState({username: data.uname, message: data.message});\n    });\n\n    socket.on('update', (data) => {\n      this.setState({\n        stocks: data.stocks,\n        brokers: data.persons,\n      })\n    });\n\n    socket.on('start_ex', data =>{\n      this.setState({\n        start_exchange: true\n      });\n      console.log(this.state.username, this.state.start_exchange)\n    });\n  };\n\n  start_torgs = () => {\n    socket.emit('start');\n  };\n\n  sell = (name, index, count) => {\n    socket.emit('sell', {name:name, index:index, count:count});\n  };\n\n  buy = (name, index, count) => {\n    console.log(name, index, count);\n    socket.emit('buy', {name:name, index:index, count:count});\n  };\n\n  render() {\n    return (\n        <div className=\"App\">\n          {this.get_content()}\n        </div>\n    );\n  }\n\n  get_content() {\n    let content;\n    if (this.state.username === 'Nobody')\n      content = <Login\n          login={this.login}\n          message = {this.state.message}\n      />;\n    else if (this.state.username === 'admin') {\n      content = <Admin\n          brokers={this.state.brokers}\n          start_torgs={this.start_torgs}\n      />;\n    }\n    else\n      content = <User\n          brokers={this.state.brokers}\n          username ={this.state.username}\n          stocks ={this.state.stocks}\n          sell ={this.sell}\n          buy = {this.buy}\n      />;\n    return content;\n  }\n\n}\n\n\n\nexport default App;\n","import React from \"react\";\nimport \"./login.css\"\n\nexport default class Login extends React.Component{\n    render() {\n        return(\n            <div className=\"Login\">\n                <form onSubmit={this.props.login}>\n                    <p>Имя пользователя:</p>\n                    <p id=\"warning\">{this.props.message}</p>\n                    <input name=\"name\"/>\n                    <p><button id=\"a\">Войти</button> </p>\n                </form>\n\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport \"./admin.css\"\n\n\nexport default class Admin extends React.Component{\n    render(){\n        return (\n            <div className=\"Admin\">\n                <nav className=\"one\">\n                    <ul>\n                        <li> Admin </li>\n                        <li id=\"b\"  onClick={this.props.start_torgs}> Начать торги </li>\n                    </ul>\n                </nav>\n\n                <div className=\"brokers\">\n                    {get_brokers(this.props.brokers)}\n                </div>\n            </div>\n        );\n\n        function get_brokers(br){\n            let brokers=[];\n            for (let i = 0; i < br.length;i++){\n                let broker = [];\n                broker.push(<p> Имя: {br[i].name} </p>);\n                broker.push(<p> Запас денежных стредств: {br[i].money} </p>);\n                let table = [];\n                table.push(\n                    <tr>\n                        <th>id</th>\n                        <th>количество</th>\n                        <th>стоимость</th>\n                        <th>на торгах</th>\n                        <th>стоимость</th>\n                    </tr>\n                );\n                for (let j = 0; j < br[i].stocks.length; j++){\n                    table.push(\n                        <tr>\n                            <td>{j}</td>\n                            <td>{br[i].stocks[j]}</td>\n                            <td>{br[i].price[j]}</td>\n                            <td>{br[i].ontorg_stocks[j]}</td>\n                            <td>{br[i].ontorg_price[j]}</td>\n                        </tr>\n                    )\n                }\n                broker.push(<table>{table}</table>)\n                brokers.push(<div className = \"broker\" key = {br[i].id}> {broker}</div>)\n            }\n            return <div>{brokers}</div>\n        }\n    }\n\n}\n","import React from 'react';\nimport \"./user.css\"\n\nvar pr = 0;\n\nexport default class User extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            username: props.username,\n            brokers: props.brokers,\n            stocks: props.stocks,\n            count: 0,\n            index: 0,\n            pr: 0\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"User\">\n                <nav className=\"one\">\n                    <ul>\n                        <li>{this.props.username}</li>\n                        <li>Прибыль на текущий момент: {pr}</li>\n                    </ul>\n                </nav>\n\n                <div className=\"brokers\">\n                    {this.get_info(this.props.username, this.props.brokers)}\n                </div>\n                <div className=\"torgs\">\n                    {this.get_torgs(this.props.stocks)}\n                </div>\n                <div className=\"broker\">\n                    <p> Продать </p>\n                    <table>\n                        <tr>\n                            <th>id</th>\n                            <th>количество</th>\n                        </tr>\n                        <tr>\n                            <th><input onChange={this.get_index}/></th>\n                            <th><input onChange={this.get_count}/></th>\n                        </tr>\n                    </table>\n                    <button onClick={this.sell}> + </button>\n                </div>\n                <div className=\"broker\">\n                    <p> Купить </p>\n                    <table>\n                        <tr>\n                            <th>id</th>\n                            <th>количество</th>\n                        </tr>\n                        <tr>\n                            <th><input onChange={this.get_index}/></th>\n                            <th><input onChange={this.get_count}/></th>\n                        </tr>\n                    </table>\n                    <button onClick={this.buy}> + </button>\n                </div>\n            </div>\n        );\n    }\n\n\n    get_info(name, br) {\n        for (let i = 0; i < br.length; i++) {\n            if (br[i].name === name) {\n                let broker = [];\n                pr = br[i].money - br[i].start_money;\n                broker.push(<p> Запас денежных стредств: {br[i].money} </p>);\n                let table = [];\n                table.push(\n                    <tr>\n                        <th>id</th>\n                        <th>количество</th>\n                        <th>стоимость</th>\n                        <th>на торгах</th>\n                        <th>стоимость</th>\n                    </tr>\n                );\n                for (let j = 0; j < br[i].stocks.length; j++) {\n                    table.push(\n                        <tr>\n                            <td>{j}</td>\n                            <td>{br[i].stocks[j]}</td>\n                            <td>{br[i].price[j]}</td>\n                            <td> {br[i].ontorg_stocks[j]} </td>\n                            <td>{br[i].ontorg_price[j]}</td>\n                        </tr>\n                    )\n                }\n                broker.push(<table>{table}</table>);\n                return <div className=\"broker\">{broker}</div>\n            }\n        }\n    }\n\n    get_torgs(st) {\n        let table = [];\n        table.push(\n            <tr>\n                <th>id</th>\n                <th>количество</th>\n                <th>цена</th>\n            </tr>\n        );\n\n        for (let i = 0; i < st.length; i++) {\n            table.push(\n                <tr>\n                    <td>{i}</td>\n                    <td>{st[i].in_torg}</td>\n                    <td>{st[i].price}</td>\n                </tr>\n            )\n        }\n        return <div className=\"broker\" id=\"tt\"><p> Акции на торгах</p><table>{table}</table></div>\n    }\n\n\n    sell = (event) => {\n        console.log(this.state.index , this.state.count, this.state.username);\n        if(this.state.index > this.state.stocks.length) {\n            console.log(this.state.index ,\">\", this.state.stocks.length);\n            return;\n        }\n        let br = this.state.brokers;\n        for (let i = 0; i < br.length; i++) {\n            if (br[i].name === this.state.username) {\n                if(this.state.count > br[i].stocks[this.state.index]) {\n                    return;\n                }\n            }\n        }\n        this.props.sell(this.props.username, this.state.index, this.state.count);\n    };\n\n    buy = (event) => {\n        console.log(\"зашел\");\n        let br = this.state.brokers;\n        if(this.state.index > this.state.stocks.length) {\n            console.log(\"по индексу\");\n            return;\n        }\n        for (let i = 0; i < br.length; i++) {\n            if (br[i].name === this.state.username) {\n                if(this.state.count > this.state.stocks[this.state.index].in_torg) {\n                    console.log(\"по количеству\");\n                    console.log(this.state.index);\n                    console.log(this.state.stocks[this.state.index].in_torg);\n                    return;\n                }\n                if(br[i].money < this.state.stocks[this.state.index].price * this.state.count) {\n                    console.log(\"деняк нет\");\n                    return\n                }\n            }\n        }\n        console.log(\"!!!\");\n        this.props.buy(this.props.username, this.state.index, this.state.count);\n    };\n\n    get_index = (event) => {\n        this.setState({index: Number(event.target.value)});\n    };\n\n    get_count = (event) => {\n        this.setState({count: Number(event.target.value)});\n    };\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n//serviceWorker.unregister();\n"],"sourceRoot":""}