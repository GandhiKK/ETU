<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title></title>
</head>
<body>

<pre><font size="5"><b><font size="6">Лабораторная работа №1</font></b>
<font size="5"><b><font size="6">Алгоритм работы</font></b>

Задача:
У Томми есть много бумажных квадратиков. Длина из стороны
(размер) изменяется от 1 до N – 1, и у него есть неограниченное
число квадратов любого размера. Но ему очень хочется получить
большой квадрат – размера N.

Он может получить такой квадрат, построив его из уже имеющихся
квадратов. Например, квадрат размера 7 может быть построен из
9 меньших квадратов. Внутри квадрата не должно быть пустого места,
меньшие квадраты не должны выходить за пределы большего и не должны
перекрываться. Кроме того Томми хочет истратить минимально возможное
число квадратов.

Для решения поставленной задачи используется алгоритм бектрекинга
(алгоритм с возвратом).

Представим наш квадрат как квадратную матрицу NxN. Если квадрат
отсутствует в заданной области ставим 0, в противном случае - 1.

Проиллюстрируем работу алгоритма на примере квадрата 4x4.

Самый очевидный способ, с чего начать алгоритм - это заполнить нашу
область единичными квадратами. Такой вариант гарантирует
существование решения задачи, что можно заполнить данную область
квадратами размерами, меньшими, чем 4 (в данном случае 1). Но этот вариант
не является искомым, так как необходимо использовать минимально возможное
число квадратов, поэтому заполнение сначала идет большими квадратами.

Первый шаг улучшенного алгоритма - поставить в левый верхний угол квадрат
большого размера (3х3), а правые и нижние края заполнить одинаковыми 1х1
квадратами. Запомним количество необходимых квадратов (8) как минимальное.

Область заполнена. Вернемся назад, когда мы ставили последний квадрат 1х1.
Не будем его ставить, изменим его размер. Пусть квадрат будет 2х2.
Попытаемся вставить такой квадрат на место предыдущего. Не соответствие
размера, квадрат большой для данной области. Область остается пустой.
Возвращаемся еще на шаг назад и так проверяем до момента, когда ставили
квадрат 3х3. Попытаемся его изменить. Тогда удаляем квадрат 3x3
и вместо него - 2х2.

Заполняем оставшуюся область квадратами рекурсивной функцией. Область будет
заполнена 4-мя квадратами 2х2. Это лучше, чем все предыдущие результаты.
Сохраним результат. Снова пытаемся изменить область и размеры квадратов.
Возвращаясь на предыдущие шаги, алгоритм будет заполнять область другими
квадратами (1х1 или 2х2) и переберет все варианты, но они не минимальны.

Алгоритм вернет результат, что лучший способ - 4-мя квадратами 2х2.
Конец работы.

</font></pre>

</body>
</html>


